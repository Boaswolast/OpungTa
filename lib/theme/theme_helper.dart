import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimary,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(24.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.gray400,
            width: 2.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 4,
        space: 4,
        color: appTheme.gray900,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.gray90001.withOpacity(0.2),
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: Color(0XFF000000),
          fontSize: 12.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w400,
        ),
        headlineLarge: TextStyle(
          color: appTheme.blueGray50001,
          fontSize: 32.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w700,
        ),
        headlineMedium: TextStyle(
          color: appTheme.blueGray50001,
          fontSize: 28.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: TextStyle(
          color: appTheme.black900.withOpacity(0.5),
          fontSize: 12.fSize,
          fontFamily: 'Mulish',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: appTheme.gray50006,
          fontSize: 10.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        labelSmall: TextStyle(
          color: appTheme.gray50006.withOpacity(0.97),
          fontSize: 8.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 20.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onPrimary,
          fontSize: 16.fSize,
          fontFamily: 'Roboto',
          fontWeight: FontWeight.w600,
        ),
        titleSmall: TextStyle(
          color: appTheme.blueGray200,
          fontSize: 14.fSize,
          fontFamily: 'Roboto Flex',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF6750A4),

    // On colors(text colors)
    onPrimary: Color(0XFFFFFFFF),
    onPrimaryContainer: Color(0XFF49454F),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber100 => Color(0XFFFCF5B6);
  Color get amber200 => Color(0XFFFFE690);

  // Black
  Color get black900 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD9D9D9);
  Color get blueGray10001 => Color(0XFFCECCCC);
  Color get blueGray200 => Color(0XFFB7C0D1);
  Color get blueGray300 => Color(0XFFA7A7B4);
  Color get blueGray30001 => Color(0XFFA8A7B5);
  Color get blueGray400 => Color(0XFF888888);
  Color get blueGray500 => Color(0XFF667799);
  Color get blueGray50001 => Color(0XFF737D90);
  Color get blueGray50002 => Color(0XFF747D90);

  // Gray
  Color get gray100 => Color(0XFFF3F3F3);
  Color get gray10001 => Color(0XFFF7F7F7);
  Color get gray200 => Color(0XFFEEEEEE);
  Color get gray20001 => Color(0XFFF1EFEF);
  Color get gray20002 => Color(0XFFEBEAEA);
  Color get gray20003 => Color(0XFFEAEAEA);
  Color get gray20004 => Color(0XFFEAE9E9);
  Color get gray400 => Color(0XFFC5C5C5);
  Color get gray40001 => Color(0XFFBBBAB5);
  Color get gray50 => Color(0XFFFCFCF9);
  Color get gray500 => Color(0XFF989696);
  Color get gray50001 => Color(0XFF979797);
  Color get gray50002 => Color(0XFF908F80);
  Color get gray50003 => Color(0XFFADADAD);
  Color get gray50004 => Color(0XFFA5A3A3);
  Color get gray50005 => Color(0XFF909081);
  Color get gray50006 => Color(0XFF9A977A);
  Color get gray5001 => Color(0XFFFEF7FF);
  Color get gray600 => Color(0XFF7B7A7A);
  Color get gray60001 => Color(0XFF79747E);
  Color get gray700 => Color(0XFF575757);
  Color get gray70001 => Color(0XFF626159);
  Color get gray70002 => Color(0XFF545454);
  Color get gray70003 => Color(0XFF6A6A6A);
  Color get gray900 => Color(0XFF202124);
  Color get gray90001 => Color(0XFF1D1B20);

  // Green
  Color get greenA700 => Color(0XFF1CF024);

  // LimeB
  Color get lime900B2 => Color(0XB2837A26);

  // White
  Color get whiteA700 => Color(0XFFFDFDFC);

  // Yellow
  Color get yellow400 => Color(0XFFF9E84F);

  // YellowB
  Color get yellow400B5 => Color(0XB5FAFD58);

  // Yellowf
  Color get yellow6007f => Color(0X7FFBE625);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
